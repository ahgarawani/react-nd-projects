{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/ahgarawani/learning/react-nanodegree/UdaciFitness/components/EntryDetail.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport MetricCard from \"./MetricCard\";\nimport { white } from \"../utils/colors\";\nimport { connect } from 'react-redux';\nimport { addEntry } from \"../actions\";\nimport { getDailyReminderValue, timeToString } from \"../utils/helpers\";\nimport { removeEntry } from \"../utils/api\";\nimport TextButton from \"./TextButton\";\n\nvar EntryDetail = function (_Component) {\n  _inherits(EntryDetail, _Component);\n\n  var _super = _createSuper(EntryDetail);\n\n  function EntryDetail() {\n    var _this;\n\n    _classCallCheck(this, EntryDetail);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.reset = function () {\n      var _this$props = _this.props,\n          remove = _this$props.remove,\n          goBack = _this$props.goBack,\n          entryId = _this$props.entryId;\n      remove();\n      goBack();\n      removeEntry(entryId);\n    };\n\n    return _this;\n  }\n\n  _createClass(EntryDetail, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      return nextProps.metrics.length !== 0 && !nextProps.metrics[0].today;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var metrics = this.props.metrics;\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 13\n        }\n      }, React.createElement(MetricCard, {\n        metrics: metrics[0],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 17\n        }\n      }), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 17\n        }\n      }, this.props.route.params.entryId), React.createElement(TextButton, {\n        onPress: this.reset,\n        style: {\n          margin: 20\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 17\n        }\n      }, \"RESET\"));\n    }\n  }]);\n\n  return EntryDetail;\n}(Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: white,\n    padding: 15\n  }\n});\n\nfunction mapStateToProps(state, _ref) {\n  var route = _ref.route;\n  var entryId = route.params.entryId;\n  return {\n    entryId: entryId,\n    metrics: state[entryId]\n  };\n}\n\nfunction mapDispatchToProps(dispatch, _ref2) {\n  var route = _ref2.route,\n      navigation = _ref2.navigation;\n  var entryId = route.params.entryId;\n  return {\n    remove: function remove() {\n      return dispatch(addEntry(_defineProperty({}, entryId, timeToString() === entryId ? getDailyReminderValue() : new Array())));\n    },\n    goBack: function goBack() {\n      return navigation.goBack();\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EntryDetail);","map":{"version":3,"sources":["/home/ahgarawani/learning/react-nanodegree/UdaciFitness/components/EntryDetail.js"],"names":["React","Component","MetricCard","white","connect","addEntry","getDailyReminderValue","timeToString","removeEntry","TextButton","EntryDetail","reset","props","remove","goBack","entryId","nextProps","metrics","length","today","styles","container","route","params","margin","StyleSheet","create","flex","backgroundColor","padding","mapStateToProps","state","mapDispatchToProps","dispatch","navigation","Array"],"mappings":";;;;;;;;;;;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;AAEA,OAAOC,UAAP;AACA,SAASC,KAAT;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT;AACA,SAASC,qBAAT,EAAgCC,YAAhC;AACA,SAASC,WAAT;AACA,OAAOC,UAAP;;IAEMC,W;;;;;;;;;;;;;;;;UAqBFC,K,GAAQ,YAAM;AAAA,wBAC0B,MAAKC,KAD/B;AAAA,UACFC,MADE,eACFA,MADE;AAAA,UACMC,MADN,eACMA,MADN;AAAA,UACcC,OADd,eACcA,OADd;AAEVF,MAAAA,MAAM;AACNC,MAAAA,MAAM;AACNN,MAAAA,WAAW,CAACO,OAAD,CAAX;AACH,K;;;;;;;WAxBD,+BAAuBC,SAAvB,EAAkC;AAC9B,aAAOA,SAAS,CAACC,OAAV,CAAkBC,MAAlB,KAA6B,CAA7B,IAAkC,CAACF,SAAS,CAACC,OAAV,CAAkB,CAAlB,EAAqBE,KAA/D;AACH;;;WAED,kBAAS;AAAA,UACEF,OADF,GACa,KAAKL,KADlB,CACEK,OADF;AAEL,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEG,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,UAAD;AAAY,QAAA,OAAO,EAAEJ,OAAO,CAAC,CAAD,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAO,KAAKL,KAAL,CAAWU,KAAX,CAAiBC,MAAjB,CAAwBR,OAA/B,CAFJ,EAGI,oBAAC,UAAD;AAAY,QAAA,OAAO,EAAE,KAAKJ,KAA1B;AAAiC,QAAA,KAAK,EAAE;AAACa,UAAAA,MAAM,EAAC;AAAR,SAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHJ,CADJ;AASH;;;;EAjBqBvB,S;;AA8B1B,IAAMmB,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC7BL,EAAAA,SAAS,EAAE;AACPM,IAAAA,IAAI,EAAE,CADC;AAEPC,IAAAA,eAAe,EAAEzB,KAFV;AAGP0B,IAAAA,OAAO,EAAE;AAHF;AADkB,CAAlB,CAAf;;AAQA,SAASC,eAAT,CAAyBC,KAAzB,QAAyC;AAAA,MAART,KAAQ,QAARA,KAAQ;AAAA,MAC7BP,OAD6B,GACjBO,KAAK,CAACC,MADW,CAC7BR,OAD6B;AAErC,SAAO;AACHA,IAAAA,OAAO,EAAPA,OADG;AAEHE,IAAAA,OAAO,EAAEc,KAAK,CAAChB,OAAD;AAFX,GAAP;AAIH;;AAED,SAASiB,kBAAT,CAA6BC,QAA7B,SAA4D;AAAA,MAApBX,KAAoB,SAApBA,KAAoB;AAAA,MAAbY,UAAa,SAAbA,UAAa;AAAA,MAChDnB,OADgD,GACpCO,KAAK,CAACC,MAD8B,CAChDR,OADgD;AAExD,SAAO;AACHF,IAAAA,MAAM,EAAE;AAAA,aAAMoB,QAAQ,CAAC5B,QAAQ,qBAC1BU,OAD0B,EAChBR,YAAY,OAAOQ,OAAnB,GACTT,qBAAqB,EADZ,GAET,IAAI6B,KAAJ,EAHyB,EAAT,CAAd;AAAA,KADL;AAMHrB,IAAAA,MAAM,EAAE;AAAA,aAAMoB,UAAU,CAACpB,MAAX,EAAN;AAAA;AANL,GAAP;AAQH;;AAED,eAAeV,OAAO,CAAC0B,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CtB,WAA7C,CAAf","sourcesContent":["  \nimport React, { Component } from 'react'\nimport { Text, View, StyleSheet } from 'react-native'\nimport MetricCard from './MetricCard'\nimport { white } from '../utils/colors'\nimport { connect } from 'react-redux'\nimport { addEntry } from '../actions'\nimport { getDailyReminderValue, timeToString } from '../utils/helpers'\nimport { removeEntry } from '../utils/api'\nimport TextButton from './TextButton'\n\nclass EntryDetail extends Component {\n\n    shouldComponentUpdate (nextProps) {\n        return nextProps.metrics.length !== 0 && !nextProps.metrics[0].today\n    }\n\n    render() {\n        const {metrics} = this.props\n        return (\n            <View style={styles.container}>\n                <MetricCard metrics={metrics[0]}/>\n                <Text>{this.props.route.params.entryId}</Text>\n                <TextButton onPress={this.reset} style={{margin:20}}>\n                    RESET\n                </TextButton>\n            </View>\n        )\n    }\n\n    \n\n    reset = () => {\n        const { remove, goBack, entryId } = this.props\n        remove()\n        goBack()\n        removeEntry(entryId)\n    }\n    \n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: white,\n        padding: 15,\n    }\n})\n\nfunction mapStateToProps(state, {route}) {\n    const { entryId } = route.params\n    return {\n        entryId,\n        metrics: state[entryId]\n    }\n}\n\nfunction mapDispatchToProps (dispatch, {route, navigation}) {\n    const { entryId } = route.params\n    return {\n        remove: () => dispatch(addEntry({\n            [entryId]: timeToString() === entryId\n            ? getDailyReminderValue()\n            : new Array()\n        })),\n        goBack: () => navigation.goBack()\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EntryDetail)"]},"metadata":{},"sourceType":"module"}