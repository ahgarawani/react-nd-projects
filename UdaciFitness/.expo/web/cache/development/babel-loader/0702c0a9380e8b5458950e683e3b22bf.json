{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/ahgarawani/learning/react-nanodegree/UdaciFitness/components/AddEntry.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { getMetricMetaInfo, timeToString } from \"../utils/helpers\";\nimport UdaciSlider from \"./UdaciSlider\";\nimport UdaciSteppers from \"./UdaciSteppers\";\nimport DateHeader from \"./DateHeader\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport TextButton from \"./TextButton\";\n\nfunction SubmitBtn(_ref) {\n  var onPress = _ref.onPress;\n  return React.createElement(TouchableOpacity, {\n    onPress: onPress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, \"SUBMIT\"));\n}\n\nvar AddEntry = function (_Component) {\n  _inherits(AddEntry, _Component);\n\n  var _super = _createSuper(AddEntry);\n\n  function AddEntry() {\n    var _this;\n\n    _classCallCheck(this, AddEntry);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      run: 0,\n      bike: 0,\n      swim: 0,\n      sleep: 0,\n      eat: 0\n    };\n\n    _this.increment = function (metric) {\n      var _getMetricMetaInfo = getMetricMetaInfo(metric),\n          max = _getMetricMetaInfo.max,\n          step = _getMetricMetaInfo.step;\n\n      _this.setState(function (state) {\n        var count = state[metric] + step;\n        return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, metric, count > max ? max : count));\n      });\n    };\n\n    _this.decrement = function (metric) {\n      _this.setState(function (state) {\n        var count = state[metric] - getMetricMetaInfo(metric).step;\n        return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, metric, count < 0 ? 0 : count));\n      });\n    };\n\n    _this.slide = function (metric, value) {\n      _this.setState(function () {\n        return _defineProperty({}, metric, value);\n      });\n    };\n\n    _this.submit = function () {\n      var key = timeToString();\n      var entry = _this.state;\n\n      _this.setState(function () {\n        return {\n          run: 0,\n          bike: 0,\n          swim: 0,\n          sleep: 0,\n          eat: 0\n        };\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(AddEntry, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var metaInfo = getMetricMetaInfo();\n\n      if (this.props.alreadyLogged) {\n        return React.createElement(View, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 9\n          }\n        }, React.createElement(Ionicons, {\n          name: 'ios-happy-outline',\n          size: 100,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 11\n          }\n        }), React.createElement(TextButton, {\n          onPress: this.reset,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 11\n          }\n        }, \"Reset\"));\n      }\n\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 7\n        }\n      }, React.createElement(DateHeader, {\n        date: new Date().toLocaleDateString(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 9\n        }\n      }), Object.keys(metaInfo).map(function (key) {\n        var _metaInfo$key = metaInfo[key],\n            getIcon = _metaInfo$key.getIcon,\n            type = _metaInfo$key.type,\n            rest = _objectWithoutProperties(_metaInfo$key, [\"getIcon\", \"type\"]);\n\n        var value = _this2.state[key];\n        return React.createElement(View, {\n          key: key,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }\n        }, getIcon(), type === 'slider' ? React.createElement(UdaciSlider, _extends({\n          value: value,\n          onChange: function onChange(value) {\n            return _this2.slide(key, value);\n          }\n        }, rest, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 19\n          }\n        })) : React.createElement(UdaciSteppers, _extends({\n          value: value,\n          onIncrement: function onIncrement() {\n            return _this2.increment(key);\n          },\n          onDecrement: function onDecrement() {\n            return _this2.decrement(key);\n          }\n        }, rest, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 19\n          }\n        })));\n      }), React.createElement(SubmitBtn, {\n        onPress: this.submit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return AddEntry;\n}(Component);\n\nexport { AddEntry as default };","map":{"version":3,"sources":["/home/ahgarawani/learning/react-nanodegree/UdaciFitness/components/AddEntry.js"],"names":["React","Component","getMetricMetaInfo","timeToString","UdaciSlider","UdaciSteppers","DateHeader","Ionicons","TextButton","SubmitBtn","onPress","AddEntry","state","run","bike","swim","sleep","eat","increment","metric","max","step","setState","count","decrement","slide","value","submit","key","entry","metaInfo","props","alreadyLogged","reset","Date","toLocaleDateString","Object","keys","map","getIcon","type","rest"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { View, TouchableOpacity, Text } from 'react-native'\nimport { getMetricMetaInfo, timeToString } from '../utils/helpers'\nimport UdaciSlider from './UdaciSlider'\nimport UdaciSteppers from './UdaciSteppers'\nimport DateHeader from './DateHeader'\nimport { Ionicons } from \"@expo/vector-icons\"\nimport TextButton from \"./TextButton\"\n\nfunction SubmitBtn ({ onPress }) {\n  return (\n    <TouchableOpacity\n      onPress={onPress}>\n        <Text>SUBMIT</Text>\n    </TouchableOpacity>\n  )\n}\n\nexport default class AddEntry extends Component {\n  state = {\n    run: 0,\n    bike: 0,\n    swim: 0,\n    sleep: 0,\n    eat: 0,\n  }\n\n  increment = (metric) => {\n    const { max, step } = getMetricMetaInfo(metric)\n\n    this.setState((state) => {\n      const count = state[metric] + step\n\n      return {\n        ...state,\n        [metric]: count > max ? max : count,\n      }\n    })\n  }\n\n  decrement = (metric) => {\n    this.setState((state) => {\n      const count = state[metric] - getMetricMetaInfo(metric).step\n\n      return {\n        ...state,\n        [metric]: count < 0 ? 0 : count,\n      }\n    })\n  }\n\n  slide = (metric, value) => {\n    this.setState(() => ({\n      [metric]: value\n    }))\n  }\n\n  submit = () => {\n    const key = timeToString()\n    const entry = this.state\n\n    // Update Redux\n\n    this.setState(() => ({ run: 0, bike: 0, swim: 0, sleep: 0, eat: 0 }))\n\n    // Navigate to home\n\n    // Save to \"DB\"\n\n    // Clear local notification\n  }\n\n  render(){\n    const metaInfo = getMetricMetaInfo()\n\n    if (this.props.alreadyLogged) {\n      return (\n        <View>\n          <Ionicons\n            name={'ios-happy-outline'}\n            size={100}\n          />\n          <TextButton onPress={this.reset}>\n            Reset\n          </TextButton>\n        </View>\n      )\n    }\n    return (\n      <View>\n        <DateHeader date={(new Date()).toLocaleDateString()}/>\n        {Object.keys(metaInfo).map((key) => {\n          const { getIcon, type, ...rest } = metaInfo[key]\n          const value = this.state[key]\n\n          return (\n            <View key={key}>\n              {getIcon()}\n              {type === 'slider'\n                ? <UdaciSlider\n                    value={value}\n                    onChange={(value) => this.slide(key, value)}\n                    {...rest}\n                  />\n                : <UdaciSteppers\n                    value={value}\n                    onIncrement={() => this.increment(key)}\n                    onDecrement={() => this.decrement(key)}\n                    {...rest}\n                  />}\n            </View>\n          )\n        })}\n        <SubmitBtn onPress={this.submit} />\n      </View>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}