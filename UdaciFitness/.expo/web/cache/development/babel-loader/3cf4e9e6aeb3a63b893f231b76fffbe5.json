{"ast":null,"code":"import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { getMetricMetaInfo, timeToString } from \"./helpers\";\nexport var CALENDAR_STORAGE_KEY = 'UdaciFitness:calendar';\n\nfunction getRandomNumber(max) {\n  return Math.floor(Math.random() * max) + 0;\n}\n\nfunction setDummyData() {\n  var _getMetricMetaInfo = getMetricMetaInfo(),\n      run = _getMetricMetaInfo.run,\n      bike = _getMetricMetaInfo.bike,\n      swim = _getMetricMetaInfo.swim,\n      sleep = _getMetricMetaInfo.sleep,\n      eat = _getMetricMetaInfo.eat;\n\n  var dummyData = {};\n  var timestamp = Date.now();\n\n  for (var i = -183; i < 0; i++) {\n    var time = timestamp + i * 24 * 60 * 60 * 1000;\n    var strTime = timeToString(time);\n    dummyData[strTime] = getRandomNumber(3) % 2 === 0 ? [{\n      run: getRandomNumber(run.max),\n      bike: getRandomNumber(bike.max),\n      swim: getRandomNumber(swim.max),\n      sleep: getRandomNumber(sleep.max),\n      eat: getRandomNumber(eat.max)\n    }] : new Array();\n  }\n\n  AsyncStorage.setItem(CALENDAR_STORAGE_KEY, JSON.stringify(dummyData));\n  return dummyData;\n}\n\nfunction setMissingDates(dates) {\n  var length = Object.keys(dates).length;\n  var timestamp = Date.now();\n\n  for (var i = -183; i < 0; i++) {\n    var time = timestamp + i * 24 * 60 * 60 * 1000;\n    var strTime = timeToString(time);\n\n    if (typeof dates[strTime] === 'undefined') {\n      dates[strTime] = new Array();\n    }\n  }\n\n  return dates;\n}\n\nexport function formatCalendarResults(results) {\n  return results === null ? setDummyData() : setMissingDates(JSON.parse(results));\n}","map":{"version":3,"sources":["/home/ahgarawani/learning/react-nanodegree/UdaciFitness/utils/_calendar.js"],"names":["AsyncStorage","getMetricMetaInfo","timeToString","CALENDAR_STORAGE_KEY","getRandomNumber","max","Math","floor","random","setDummyData","run","bike","swim","sleep","eat","dummyData","timestamp","Date","now","i","time","strTime","Array","setItem","JSON","stringify","setMissingDates","dates","length","Object","keys","formatCalendarResults","results","parse"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,2CAAzB;AACA,SAASC,iBAAT,EAA4BC,YAA5B;AAEA,OAAO,IAAMC,oBAAoB,GAAG,uBAA7B;;AAEP,SAASC,eAAT,CAA0BC,GAA1B,EAA+B;AAC7B,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBH,GAA3B,IAAkC,CAAzC;AACD;;AAED,SAASI,YAAT,GAAyB;AAAA,2BACiBR,iBAAiB,EADlC;AAAA,MACfS,GADe,sBACfA,GADe;AAAA,MACVC,IADU,sBACVA,IADU;AAAA,MACJC,IADI,sBACJA,IADI;AAAA,MACEC,KADF,sBACEA,KADF;AAAA,MACSC,GADT,sBACSA,GADT;;AAGvB,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAMC,SAAS,GAAGC,IAAI,CAACC,GAAL,EAAlB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAC,GAAd,EAAmBA,CAAC,GAAG,CAAvB,EAA0BA,CAAC,EAA3B,EAA+B;AAC7B,QAAMC,IAAI,GAAGJ,SAAS,GAAGG,CAAC,GAAG,EAAJ,GAAS,EAAT,GAAc,EAAd,GAAmB,IAA5C;AACA,QAAME,OAAO,GAAGnB,YAAY,CAACkB,IAAD,CAA5B;AACAL,IAAAA,SAAS,CAACM,OAAD,CAAT,GAAqBjB,eAAe,CAAC,CAAD,CAAf,GAAqB,CAArB,KAA2B,CAA3B,GACjB,CAAC;AACCM,MAAAA,GAAG,EAAEN,eAAe,CAACM,GAAG,CAACL,GAAL,CADrB;AAECM,MAAAA,IAAI,EAAEP,eAAe,CAACO,IAAI,CAACN,GAAN,CAFtB;AAGCO,MAAAA,IAAI,EAAER,eAAe,CAACQ,IAAI,CAACP,GAAN,CAHtB;AAICQ,MAAAA,KAAK,EAAET,eAAe,CAACS,KAAK,CAACR,GAAP,CAJvB;AAKCS,MAAAA,GAAG,EAAEV,eAAe,CAACU,GAAG,CAACT,GAAL;AALrB,KAAD,CADiB,GAQjB,IAAIiB,KAAJ,EARJ;AASD;;AAEDtB,EAAAA,YAAY,CAACuB,OAAb,CAAqBpB,oBAArB,EAA2CqB,IAAI,CAACC,SAAL,CAAeV,SAAf,CAA3C;AAEA,SAAOA,SAAP;AACD;;AAED,SAASW,eAAT,CAA0BC,KAA1B,EAAiC;AAC/B,MAAMC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYH,KAAZ,EAAmBC,MAAlC;AACA,MAAMZ,SAAS,GAAGC,IAAI,CAACC,GAAL,EAAlB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAC,GAAd,EAAmBA,CAAC,GAAG,CAAvB,EAA0BA,CAAC,EAA3B,EAA+B;AAC7B,QAAMC,IAAI,GAAGJ,SAAS,GAAGG,CAAC,GAAG,EAAJ,GAAS,EAAT,GAAc,EAAd,GAAmB,IAA5C;AACA,QAAME,OAAO,GAAGnB,YAAY,CAACkB,IAAD,CAA5B;;AAEA,QAAI,OAAOO,KAAK,CAACN,OAAD,CAAZ,KAA0B,WAA9B,EAA2C;AACzCM,MAAAA,KAAK,CAACN,OAAD,CAAL,GAAiB,IAAIC,KAAJ,EAAjB;AACD;AACF;;AAED,SAAOK,KAAP;AACD;;AAED,OAAO,SAASI,qBAAT,CAAgCC,OAAhC,EAAyC;AAC9C,SAAOA,OAAO,KAAK,IAAZ,GACHvB,YAAY,EADT,GAEHiB,eAAe,CAACF,IAAI,CAACS,KAAL,CAAWD,OAAX,CAAD,CAFnB;AAGD","sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage'\nimport { getMetricMetaInfo, timeToString } from './helpers'\n\nexport const CALENDAR_STORAGE_KEY = 'UdaciFitness:calendar'\n\nfunction getRandomNumber (max) {\n  return Math.floor(Math.random() * max) + 0\n}\n\nfunction setDummyData () {\n  const { run, bike, swim, sleep, eat } = getMetricMetaInfo()\n\n  let dummyData = {}\n  const timestamp = Date.now()\n\n  for (let i = -183; i < 0; i++) {\n    const time = timestamp + i * 24 * 60 * 60 * 1000\n    const strTime = timeToString(time)\n    dummyData[strTime] = getRandomNumber(3) % 2 === 0\n      ? [{\n          run: getRandomNumber(run.max),\n          bike: getRandomNumber(bike.max),\n          swim: getRandomNumber(swim.max),\n          sleep: getRandomNumber(sleep.max),\n          eat: getRandomNumber(eat.max),\n        }]\n      : new Array()\n  }\n\n  AsyncStorage.setItem(CALENDAR_STORAGE_KEY, JSON.stringify(dummyData))\n\n  return dummyData\n}\n\nfunction setMissingDates (dates) {\n  const length = Object.keys(dates).length\n  const timestamp = Date.now()\n\n  for (let i = -183; i < 0; i++) {\n    const time = timestamp + i * 24 * 60 * 60 * 1000\n    const strTime = timeToString(time)\n\n    if (typeof dates[strTime] === 'undefined') {\n      dates[strTime] = new Array()\n    }\n  }\n\n  return dates\n}\n\nexport function formatCalendarResults (results) {\n  return results === null\n    ? setDummyData()\n    : setMissingDates(JSON.parse(results))\n}"]},"metadata":{},"sourceType":"module"}